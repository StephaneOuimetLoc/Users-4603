<!DOCTYPE html>

<html lang="en">
  <!-- #BeginTemplate "../../html_template.dwt" -->

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="SMS Help Document">
    <link type="text/css" href="/assets/code_prism/prism.css" rel="stylesheet"><!-- Title/Keywords edit on new documents -->
    <!-- #BeginEditable "doctitle" -->

    <!-- #EndEditable -->
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="SMS-HtmlEditor-State" content="Draft" />
    <title>eCommerce - Send Order To POS</title>
    <link href="../../work.css" rel="stylesheet">
  </head>

  <body class="bg-white">
    <a name="top"></a> <!-- Docs page layout -->
     <br>
     

    <h1><!-- #BeginEditable "Title" -->eCommerce - Send Order To POS<!-- #EndEditable --></h1>

    <p><!-- #BeginEditable "tag_line" -->eCommerce <!-- #EndEditable -->
    </p>
    <!-- #BeginEditable "toc" -->

    <div class="toc-container shadow">
      <h2 class="toc-title">Table of Contents</h2>
    </div>
    <!-- #EndEditable -->

    <div class="article-contents">
      <!-- #BeginEditable "Body" -->

      <h2>Overview</h2>

      <p>Send to POS allows customer to prepare their basket on the online store and create a backup of the transaction to be restored directly at the lanes rather than processing the entire order. This will create a QR code which is then used to scan and restore this transactions with all the original basket items</p>

      <h2>Generating the barcode</h2>

      <p>To generate the barcode, go into the basket window once you have the content you'd like to ship into a store backup order. The "Send To POS" option at the bottom create a backup sent directly to the store.</p>
      <img src="Send_To_POS_Backup_files/basket_sendToPos.png"><br>
       

      <p>A confirmation will prompt to confirm if the customer wants to back up the order or cancel, followed by a QR code generated that contains the information required to retrieve (customer ID and order ID)</p>
      <img src="Send_To_POS_Backup_files/QR_code_sendToPos.png"><br>
       

      <h2>Restoring the order at the lane</h2>

      <p>In order to restore the order, a script needs to be setup in a custom function with specific parameters that will allow you to pass the scanned QR code and retrive the order. This script is found under the STOREMAN/OFFICE/ and named:</p>

      <ul>
        <li>trs_clt_res_scan_qr.sqi</li>
      </ul>

      <p>You can create a function within the free range of available numberes, a common one being 372 as an alternative restore function. You will need to add some parameters for the POS to be able to open back the order, as such with the following parameters:</p>

      <ul>
        <li>Script=trs_clt_res_web_order.sqi HDRSALF1068=SALE HDRSALF1067=OPEN</li>
      </ul>
      <img src="Send_To_POS_Backup_files/restore_function_SendToPos.png"><br>
       

      <p>Depending on how you want to restore, you can setup either SCAN=1 and manually select the function with a pre-configured button, then scan the QR.</p>

      <p>You can also setup SWIPE=1 and have a scan decode configured, to call the function in question when the following prefix is found "WO-" (without the quotes)</p>

      <p><img src="Send_To_POS_Backup_files/restored_trs_sendToPos.png"></p>

      <p>Once the order is restored you will see it repopulate on the lane like any regular order</p>
      <!-- #EndEditable -->
    </div>
    <!-- end of main container -->
    <a class="back-to-top shadow" href="#top">â–²</a> 
<script type="text/javascript" src="/assets/jquery-3.5.1.min.js">
</script>
<script type="text/javascript" src="/assets/bootstrap.min.js">
</script>
<script type="text/javascript" src="/assets/tocbot412/tocbot.min.js">
</script>
<script type="text/javascript">
        tocbot.init({
            // Where to render the table of contents.
            tocSelector: '.toc',
            // Where to grab the headings to build the table of contents.
            contentSelector: '.article-contents',
            // Which headings to grab inside of the contentSelector element.
            headingSelector: 'h2',
            // For headings inside relative or absolute positioned containers within content.
            hasInnerContainers: true,
        });
    
</script>
<script type="text/javascript" src="/assets/code_prism/prism.js">
</script>
    <!-- #EndTemplate -->
  </body>
</html>

